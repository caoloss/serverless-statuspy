{"version":3,"sources":["theme.js","api.js","components/Collapsible.js","assets/serverless-cloud-text.svg","assets/cloud-dots.svg","Login.js","PrivateRoute.js","reportWebVitals.js","Resource.js","UpdatedAt.js","IncidentDrawer.js","utils.js","Status.js","UpdatesRow.js","Incidents.js","ServiceModal.js","Services.js","index.js"],"names":["theme","extendTheme","withDefaultProps","defaultProps","size","color","components","shadows","outline","config","initialColorMode","useSystemColorMode","Input","sizes","sm","field","borderRadius","addon","baseStyle","Button","Skeleton","bg","props","colors","gray","brand","styles","global","fontFamily","getHeaders","password","Authorization","JSON","parse","localStorage","getItem","apiClient","a","url","body","method","fetch","headers","res","json","ok","console","log","Error","message","Collapsible","forwardRef","outerRef","collapsed","as","ref","useRef","useState","undefined","height","setHeight","useLayoutEffect","current","scrollHeight","createElement","style","overflow","transition","display","gridTemplateColumns","gap","Login","useLocalStorage","setStoredPassword","setPassword","loading","setloading","errorMessage","setErrorMessage","login","window","location","href","justifyContent","alignItems","position","left","top","width","css","transform","src","CloudDots","alt","h","spacing","ServerlessCloudLogo","fontSize","placeholder","type","maxWidth","onChange","e","target","value","onKeyUp","event","key","isLoading","onClick","colorScheme","status","PrivateRoute","component","options","storedPassword","useEffect","FinalComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Resource","path","render","toast","useToast","loadingAdd","setLoadingAdd","loadingDelete","setLoadingDelete","useSWR","data","error","reload","mutate","deleteResource","resourceId","next","title","duration","isClosable","addResource","resource","stringify","serviceId","incidentId","relativeTime","require","dayjs","extend","UpdatedAt","updatedAt","createdAt","fromNow","IncidentDrawer","selectedIncident","setSelectedIncident","addIncident","deleteIncident","updateDescription","affectedServicesStatus","incidentStatus","update","setUpdate","useMemo","prev","servicesData","services","sort","b","serviceCreatedAt","useDisclosure","isDrawerOpen","isOpen","onDrawerOpen","onOpen","onDrawerClose","onClose","isAlertOpen","onAlertOpen","onAlertClose","addUpdateNext","deleteIncidentNext","handleDrawerClose","handleSaveIncident","placement","borderBottomWidth","margin","incidentName","id","incidentDescription","templateColumns","map","service","isChecked","affectedServicesIds","find","checked","filter","serviceName","p","shadow","borderWidth","updates","updateCreatedAt","updateUpdatedAt","updateId","Delete","marginLeft","cursor","borderTopWidth","leftIcon","mr","fontWeight","ml","getStatusColor","num","green","yellow","orange","blue","red","Status","useTheme","background","marginRight","UpdatesRow","incident","borderLeftWidth","borderLeftColor","paddingLeft","marginBottom","backgroundColor","Incidents","match","filterIncidents","setFilterIncidents","isPublic","includes","mt","maxW","startColor","endColor","incidents","incidentCreatedAt","minH","flex","incidentUpdatedAt","ServiceModal","selectedService","setSelectedService","addService","deleteService","isModalOpen","onModalOpen","onModalClose","deleteServiceNext","handleModalClose","addServiceNext","handleSaveService","serviceStatus","serviceDescription","ServiceStatus","Services","filterServices","setFilterServices","serviceUpdatedAt","App","useLocation","pathname","minHeight","RouterLink","to","removeItem","exact","ReactDOM","StrictMode","document","getElementById"],"mappings":"sLA4FeA,EAnFDC,YACZC,YAAiB,CAEfC,aAAc,CACZC,KAAM,KAENC,MAAO,QAGTC,WAAY,CAAC,SAAU,WAAY,YAErC,CACEC,QAAS,CACPC,QAAS,qBAEXC,OAtBW,CACbC,iBAAkB,OAClBC,oBAAoB,GAqBlBL,WAAY,CACVM,MAAO,CACLC,MAAO,CACLC,GAAI,CACFC,MAAO,CACLC,aAAc,MAEhBC,MAAO,CACLD,aAAc,OAGlBE,UAAW,KAKfC,OAAQ,CACND,UAAW,CACTb,MAAO,SAIXe,SAAU,CACRF,UAAW,CACTG,GAAI,SAACC,GAAD,OAAWA,EAAMC,OAAOC,KAAK,SAKvCD,OAAQ,CACNE,MAAO,CACN,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,UACJ,IAAI,WAELD,KAAM,CACJ,IAAK,UACL,IAAK,YAITE,OAAQ,CACNC,OAAQ,SAACL,GAAD,MAAY,CAClB,KAAQ,CAENM,WAAY,OAEZP,GAAI,gB,qJC3ERQ,EAAa,SAACC,GAAD,MAAe,CAC9BC,cAAc,UAAD,OAAYD,GAAYE,KAAKC,MAAMC,aAAaC,QAAQ,sBAAwB,KAAO,IAEpG,eAAgB,qBAEPC,EAAS,uCAAG,yCAAAC,EAAA,6DAASC,EAAT,EAASA,IAAKC,EAAd,EAAcA,KAAMT,EAApB,EAAoBA,SAApB,IAA8BU,cAA9B,MAAuC,MAAvC,WACHC,MAAM,GAAD,OARX,sDAQW,YAAeH,GAAO,CACzCE,SACAE,QAASb,EAAWC,GACpBS,SAJiB,cACfI,EADe,gBAMFA,EAAIC,OANF,UAMfA,EANe,QAOjBD,EAAIE,GAPa,0CASVD,GATU,cAYjBE,QAAQC,IAAI,MAAMH,GACZ,IAAII,MAAMJ,EAAKK,SAbJ,4CAAH,sD,6BCLTC,EAAcC,aACvB,WAAsCC,GAAc,IAAjDC,EAAgD,EAAhDA,UAAgD,IAArCC,UAAqC,MAAhC,MAAgC,EAAtBhC,EAAsB,iBAC3CiC,EAAMC,iBAAOJ,GACnB,EAA4BK,mBAASJ,EAAY,OAAIK,GAArD,mBAAOC,EAAP,KAAeC,EAAf,KAeA,OAbAC,2BAAgB,WACM,OAAhBN,EAAIO,SAKNF,EADEP,EACQ,EAIFE,EAAIO,QAAQC,gBACrB,CAACR,EAAKF,IAEFW,wBAAcV,EAAD,YAAC,eAChBhC,GADe,IAElBiC,MACAU,MAAM,aACJC,SAAU,SACVC,WAAY,2BACZR,SACAS,QAAS,OACTC,oBAAqB,mBACrBC,IAAK,QACFhD,EAAM2C,aC/BJ,MAA0B,kDCA1B,MAA0B,uC,OCS5BM,EAAQ,WAEjB,MAA8BC,YAAgB,oBAAqB,IAA1DC,EAAT,oBACA,EAAgChB,mBAAS,IAAzC,mBAAO3B,EAAP,KAAiB4C,EAAjB,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KACA,EAAwCnB,mBAAS,IAAjD,mBAAOoB,EAAP,KAAqBC,EAArB,KACMC,EAAK,uCAAG,sBAAA1C,EAAA,yDACLP,EADK,uBAENgD,EAAgB,+BAFV,0CAQNF,GAAW,GARL,SASAxC,EAAU,CAAEE,IAAK,OAAQR,aATzB,OAWN2C,EAAkB3C,GAClBkD,OAAOC,SAASC,KAAO,IAZjB,kDAcNpC,QAAQC,IAAI,UAAZ,MACA+B,EAAgB,KAAE7B,SAfZ,QAkBV2B,GAAW,GAlBD,0DAAH,qDAoBX,OACI,eAAC,IAAD,CAAKR,QAAQ,OAAOe,eAAe,SAASC,WAAW,SAAvD,UACM,eAAC,IAAD,CACCC,SAAS,WACTC,KAAK,IACLC,IAAI,QACJ,UAAQ,KACRnB,QAAQ,OACRe,eAAe,gBACfK,MAAM,OACNC,IAAK,CACD,mBAAoB,CACnB,oBAAqB,aACrBC,UAAW,eAXjB,UAeN,qBAAKC,IAAKC,EAAWC,IAAI,qBACzB,qBAAKF,IAAKC,EAAWC,IAAI,wBAErB,cAAC,IAAD,CAAQC,EAAE,QAAQzF,MAAM,QAAxB,SAEI,eAAC,IAAD,CAAQ0F,QAAQ,OAAhB,UACA,qBAAKJ,IAAKK,EAAqBH,IAAI,qBAE/B,cAAC,IAAD,CAASzF,KAAK,KAAK6F,SAAS,OAA5B,mCACA,cAAC,IAAD,CAAS7F,KAAK,KAAd,mBACA,cAAC,IAAD,CAAO8F,YAAY,WAAWC,KAAK,WACnCC,SAAS,QACTC,SAAU,SAAAC,GACN5B,EAAY4B,EAAEC,OAAOC,OACrB1B,EAAgB,KAEhB2B,QAAS,SAACC,GACY,UAAdA,EAAMC,KACN5B,OAIZ,cAAC,IAAD,CACAqB,SAAS,QACTQ,UAAWjC,EAASkC,QAAS9B,EAAO3E,KAAK,KAAKoF,MAAM,OAAOsB,YAAY,QAAQzG,MAAM,OAFrF,mBAGA,cAAC6C,EAAD,CAAaG,WAAYwB,EAAzB,SACI,eAAC,IAAD,CAAOkC,OAAO,QAAd,UACI,cAAC,IAAD,IACClC,gB,gBC5EhBmC,EAAe,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAcC,EAAc,iBACzD,EAA4C1C,YAAgB,oBAAqB,IAAjF,mBAAO2C,EAAP,UAEAC,qBAAU,cAEP,IAGH,IAAIC,EAAiB9C,EAWrB,OALAzB,QAAQC,IAAI,iBAAiBoE,GACzBA,IACFE,EAAiBJ,GAGZ,cAAC,IAAD,2BAAWC,GAAX,IAAoBD,UAAWI,MCXzBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,uLCDDQ,GAAW,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,OACtBC,EAAQC,eACd,EAAoC1E,mBAAS,MAA7C,mBAAO2E,EAAP,KAAmBC,EAAnB,KACA,EAA0C5E,mBAAS,MAAnD,mBAAO6E,EAAP,KAAsBC,EAAtB,KACA,EAAwBC,YAAOR,GAAM,SAAC1F,GAAD,OAASF,EAAU,CAAEE,WAAlDmG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACR/D,GAAW8D,IAASC,EAEpBC,EAAS,kBAAMC,YAAOZ,IACtBa,EAAc,uCAAG,WAAOC,EAAYC,GAAnB,SAAA1G,EAAA,sEAEfkG,EAAiBO,GAFF,SAGT1G,EAAU,CACZE,IAAI,GAAD,OAAK0F,EAAL,YAAac,GAActG,OAAQ,WAJ3B,uBAMTmG,IANS,OAOfT,EAAM,CACFc,MAAM,4BACNjC,OAAQ,UACRkC,SAAU,IACVC,YAAY,IAEhBX,EAAiB,MACbQ,GACAA,IAfW,kDAkBfR,EAAiB,MACjBL,EAAM,CACFc,MAAO,KAAE/F,QACT8D,OAAQ,QACRkC,SAAU,IACVC,YAAY,IAvBD,0DAAH,wDA2BdC,EAAW,uCAAG,WAAOC,EAAUL,GAAjB,SAAA1G,EAAA,sEAEZgG,GAAc,GAFF,SAGNjG,EAAU,CACZE,IAAI,GAAD,OAAK0F,GAAQxF,OAAQ,MACxBD,KAAMP,KAAKqH,UAAUD,KALb,uBAONT,IAPM,OAQZN,EAAc,OACV,OAACe,QAAD,IAACA,OAAD,EAACA,EAAUE,YAAcF,EAASG,YAElCrB,EAAM,CACFc,MAAM,4BACNjC,OAAQ,UACRkC,SAAU,IACVC,YAAY,IAGhBH,GACAA,IAnBQ,kDAsBZV,EAAc,MACdH,EAAM,CACFc,MAAO,KAAE/F,QACT8D,OAAQ,QACRkC,SAAU,IACVC,YAAY,IA3BJ,0DAAH,wDAgCjB,OAAOjB,EAAO,CACVQ,OACAC,QACA/D,UACAgE,SACAE,iBACAP,gBACAa,cACAf,gB,oBC/EFoB,GAAeC,EAAQ,KAE7BC,KAAMC,OAAOH,IAEN,IAAMI,GAAY,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,UAClC,OACI,cAAC,KAAD,CAAMzJ,MAAM,OAAO4F,SAAS,KAA5B,SAEC6D,IAAcD,EAAd,kBACgBH,KAAMG,GAAWE,WADjC,kBAEgBL,KAAMI,GAAWC,cC0B7BC,GAAiB,SAAC,GAOxB,IANHC,EAME,EANFA,iBACAC,EAKE,EALFA,oBACAC,EAIE,EAJFA,YACAC,EAGE,EAHFA,eACA9B,EAEE,EAFFA,cACAF,EACE,EADFA,WAEA,EAA4B3E,mBAAS,CACjC4G,kBAAmB,GACnBC,4BAAwB5G,EACxB6G,eAAc,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAkBM,iBAHtC,mBAAOC,EAAP,KAAeC,EAAf,KAKMF,EAAiBG,mBACnB,yBAAMT,QAAN,IAAMA,OAAN,EAAMA,EAAkBM,iBACxB,CAACN,IAEL7C,qBAAU,WAON,OANImD,GACAE,GAAU,SAACE,GAAD,mBAAC,eACJA,GADG,IAENJ,sBAGD,eACR,CAACA,EAAgBE,IACpB,IAAcG,EAAiBpC,YAAO,YAAY,SAAClG,GAAD,OAC9CF,EAAU,CAAEE,WADRmG,KAIFoC,EAAWD,EACXA,EAAaC,SAASC,MACpB,SAACzI,EAAG0I,GAAJ,OAAUA,EAAEC,iBAAmB3I,EAAE2I,oBAEnC,GACN,EAIIC,cAHQC,EADZ,EACIC,OACQC,EAFZ,EAEIC,OACSC,EAHb,EAGIC,QAEJ,EAIIN,cAHQO,EADZ,EACIL,OACQM,EAFZ,EAEIJ,OACSK,EAHb,EAGIH,QAGEI,EAAgB,WAClBlB,EAAU,CACNJ,kBAAmB,GACnBC,4BAAwB5G,EACxB6G,eAAc,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAkBM,kBAIpCqB,EAAqB,WACvBF,IACAG,KAEJzE,qBAAU,WAIN,OAHI6C,GACAmB,IAEG,eACR,CAACnB,EAAkBmB,IACtB,IAAMS,EAAoB,WACtBP,IACApB,EAAoB,OAGlB4B,EAAkB,uCAAG,sBAAAzJ,EAAA,sDACvB8H,EAAY,2BAEDF,GAFA,IAGHM,gBAAgC,OAAhBN,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBM,iBAAkB,kBAExDsB,GANmB,2CAAH,qDAUxB,OACI,qCACI,eAAC,IAAD,CACIE,UAAU,QACVR,QAASM,EACTV,OAAQD,EACR9K,KAAK,KACL0G,YAAY,QALhB,UAOI,cAAC,IAAD,IACA,eAAC,IAAD,WACI,eAAC,IAAD,CAAckF,kBAAkB,MAAhC,UACI,cAAC,IAAD,CAAmBC,OAAO,UACT,OAAhBhC,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBiC,eAAgB,sBAEvC,cAAC,IAAD,UACI,eAAC,IAAD,CAAQnG,QAAQ,OAAhB,UACI,eAAC,IAAD,CAAaoG,GAAG,eAAhB,UACI,cAAC,KAAD,4BACA,cAAC,IAAD,CACIjG,YAAY,gBACZC,KAAK,OACLK,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBiC,eAAgB,GACzC7F,SAAU,SAACC,GAAD,OACN4D,GAAoB,SAACS,GAAD,mBAAC,eACdA,GADa,IAEhBuB,aAAc5F,EAAEC,OAAOC,YAG/BC,QAAS,SAACC,GACY,UAAdA,EAAMC,KACNmF,UAKhB,eAAC,IAAD,CAAaK,GAAG,sBAAhB,UACI,cAAC,KAAD,mCAEA,cAAC,KAAD,CACIjG,YAAY,uBACZM,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBmC,sBAAuB,GAChD/F,SAAU,SAACC,GAAD,OACN4D,GAAoB,SAACS,GAAD,mBAAC,eACdA,GADa,IAEhByB,oBAAqB9F,EAAEC,OAAOC,YAGtCC,QAAS,SAACC,GACY,UAAdA,EAAMC,KACNmF,UAKhB,eAAC,IAAD,CAAaK,GAAG,iBAAhB,UACI,cAAC,KAAD,8BAEA,eAAC,IAAD,CACIjG,YAAY,gBACZM,OAAuB,OAAhByD,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBM,iBAAkB,gBAC3ClE,SAAU,SAACC,GAAD,OACN4D,GAAoB,SAACS,GAAD,mBAAC,eACdA,GADa,IAEhBJ,eAAgBjE,EAAEC,OAAOC,YANrC,UAUI,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,WAAd,4BAGR,eAAC,IAAD,CAAa2F,GAAG,sBAAhB,UACI,cAAC,KAAD,gCACA,cAAC,IAAD,CAAME,gBAAgB,iBAAiB/H,IAAK,EAA5C,SACKuG,GACGA,EAASyB,KAAI,SAACC,GAAD,aACT,cAAC,IAAD,UACI,cAAC,KAAD,CACIC,aACK,OAACvC,QAAD,IAACA,GAAD,UAACA,EAAkBwC,2BAAnB,aAAC,EAAuCC,MACrC,SAACP,GAAD,OAAQA,IAAOI,EAAQjD,cAG/BjD,SAAU,SAACC,GAAD,OACN4D,GAAoB,SAACS,GAAD,yBAAC,eACdA,GADa,IAEhB8B,oBAAqBnG,EAAEC,OAAOoG,QAAT,sBAEThC,EAAK8B,qBAAuB,IAFnB,CAGbF,EAAQjD,YAHK,UAKfqB,EAAK8B,2BALU,aAKf,EAA0BG,QACxB,SAACT,GAAD,OAAQA,IAAOI,EAAQjD,mBAf3C,SAoBKiD,EAAQM,eArBPN,EAAQjD,oBA2BjB,OAAhBW,QAAgB,IAAhBA,OAAA,EAAAA,EAAkBV,aACf,cAAC,GAAD,CACIvB,KAAI,2BAAeiC,QAAf,IAAeA,OAAf,EAAeA,EAAkBV,WAAjC,YACJtB,OAAQ,SAAC3G,GAAD,eACJ,cAAC,IAAD,CACIkE,MAAM,OACNsH,EAAG,EACHC,OAAO,KACPC,YAAY,MACZhM,aAAa,KALjB,SAOI,eAAC,IAAD,CAAQ+E,QAAQ,OAAhB,UACI,eAAC,IAAD,CAAaoG,GAAG,oBAAhB,UACI,cAAC,KAAD,iCAEA,cAAC,KAAD,CACIjG,YAAY,qBACZM,OAAa,OAANgE,QAAM,IAANA,OAAA,EAAAA,EAAQH,oBAAqB,GACpChE,SAAU,SAACC,GAAD,OACNmE,GAAU,SAACE,GAAD,mBAAC,eACJA,GADG,IAENN,kBAAmB/D,EAAEC,OAAOC,YAGpCC,QAAS,SAACC,GACY,UAAdA,EAAMC,KACNrF,EAAM6H,YAAYqB,EAAQmB,SAK1C,eAAC,IAAD,CAAaQ,GAAG,+BAAhB,UACI,cAAC,KAAD,8CAEA,eAAC,IAAD,CACIjG,YAAY,wCACZM,MAAK,OAAEgE,QAAF,IAAEA,OAAF,EAAEA,EAAQF,uBACfjE,SAAU,SAACC,GAAD,OACNmE,GAAU,SAACE,GAAD,mBAAC,eACJA,GADG,IAENL,uBAAwBhE,EAAEC,OAAOC,YAN7C,UAUI,wBAAQA,MAAM,cAAd,yBAChC,wBAAQA,MAAM,uBAAd,kCACA,wBAAQA,MAAM,iBAAd,4BACA,wBAAQA,MAAM,eAAd,gCAGwB,cAAC,IAAD,CAAa2F,GAAG,+BAAhB,SACI,cAAC,IAAD,CAAQhH,eAAe,WAAvB,SAEI,cAAC,IAAD,CACIyB,UAAWtF,EAAM8G,WACjBvB,QAAS,kBACLvF,EAAM6H,YAAYqB,EAAQmB,IAE9B7E,YAAY,QACZzG,MAAM,OANV,6BAYR,cAAC,KAAD,IAtDJ,UAuDKiB,EAAMmH,YAvDX,iBAuDK,EAAYwE,eAvDjB,aAuDK,EACKnC,MACE,SAACzI,EAAG0I,GAAJ,OAAUA,EAAEmC,gBAAkB7K,EAAE6K,mBAEnCZ,KAAI,SAAC9B,GAAD,OACD,eAAC,IAAD,CACIrF,eAAe,gBAEfK,MAAM,OACNsH,EAAG,EACHC,OAAO,KACPC,YAAY,MACZhM,aAAa,KAPjB,UASI,cAAC,KAAD,iBAAOwJ,QAAP,IAAOA,OAAP,EAAOA,EAAQH,oBACf,eAAC,IAAD,WACI,cAAC,GAAD,CACIR,UAAWW,EAAO2C,gBAClBrD,UAAWU,EAAO0C,kBAGrB5L,EAAMgH,gBAAkBkC,EAAO4C,SAC5B,cAAC,KAAD,CAAShN,KAAK,KAAK6L,OAAO,aAE1B,cAACoB,EAAA,EAAD,CACIjN,KAAK,KACLkN,WAAW,MACXC,OAAO,UACP1G,QAAS,kBACLvF,EAAMuH,eAAe2B,EAAO4C,kBAtBvC5C,EAAO4C,0BAoCpD,eAAC,IAAD,CAAcI,eAAe,MAA7B,UACI,cAAC,IAAD,CACI3G,QAAS4E,EACTQ,OAAO,mBACPwB,SAAU,cAACJ,EAAA,EAAD,IAHd,oBAQA,cAAC,IAAD,CAAQK,GAAI,EAAG7G,QAASgF,EAAxB,mBAGA,cAAC,IAAD,CACIjF,UAAWwB,EACXtB,YAAY,QACZzG,MAAM,OACNwG,QAASiF,EAJb,SAMK7B,GAAoBA,EAAiBV,WAChC,OACA,oBAKrBU,GACG,cAAC,KAAD,CAAakB,OAAQK,EAAaD,QAASG,EAA3C,SACI,cAAC,IAAD,UACI,eAAC,KAAD,WACI,cAAC,IAAD,CAAmBzF,SAAS,KAAK0H,WAAW,OAA5C,6BAIA,eAAC,IAAD,6CACoC,IAChC,cAAC,KAAD,CAAMrK,GAAG,IAAT,gBAAc2G,QAAd,IAAcA,OAAd,EAAcA,EAAkBiC,eAFpC,QAKA,eAAC,IAAD,WACI,cAAC,IAAD,CAAQrF,QAAS6E,EAAjB,oBACA,cAAC,IAAD,CACI9E,UAAW0B,EACXxB,YAAY,MACZzG,MAAM,OACNwG,QAAS,kBACLuD,EAAc,OACVH,QADU,IACVA,OADU,EACVA,EAAkBV,WAClBqC,IAGRgC,GAAI,EAVR,kC,UCpXnBC,GAAiB,SAAC9G,GAC9B,IADsCxF,EACvC,uDADgD,GAEtCuM,EAAM,IACZ,MAAkB,gBAAX/G,GAAuC,aAAXA,GAC3B,OAANxF,QAAM,IAANA,OAAA,EAAAA,EAAQwM,MAAMD,KAAQ,QACX,yBAAX/G,GACM,OAANxF,QAAM,IAANA,OAAA,EAAAA,EAAQyM,OAAOF,KAAQ,SACZ,mBAAX/G,GAA0C,eAAXA,GACzB,OAANxF,QAAM,IAANA,OAAA,EAAAA,EAAQ0M,OAAOH,KAAQ,SACZ,eAAX/G,EACAxF,EAAO2M,KAAKJ,IAAQ,OACpBvM,EAAO4M,IAAIL,IAAQ,OCPnBtE,GAAeC,EAAQ,KAE7BC,KAAMC,OAAOH,IAEN,IAAM4E,GAAS,SAAC,GAAc,IAAbrH,EAAY,EAAZA,OACd/G,EAAQqO,cACd,OACI,eAAC,KAAD,WACA,cAAC,IAAD,CACE7I,MAAM,OACN7B,OAAO,OACPM,MAAO,CACLqK,WAAYT,GAAe9G,EAAQ/G,EAAMuB,QACzCP,aAAc,MACduN,YAAa,UAGjB,cAAC,KAAD,CAAOtI,SAAS,KAAhB,SAECc,QChBIyH,GAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBzO,EAAQqO,cACN5F,EAASD,YAAO,aAAD,cAAciG,QAAd,IAAcA,OAAd,EAAcA,EAAUlF,WAAxB,aAA8C,SAACjH,GAAD,OAASF,EAAU,CAAEE,WAAlFmG,KACFwE,EAAO,OAAGxE,QAAH,IAAGA,OAAH,EAAGA,EAAMwE,QAEtB,OADAnK,QAAQC,IAAI,UAAWkK,GAGnB,cAAC,IAAD,CAAKyB,gBAAgB,MAAMC,gBAAgB,OAAQjJ,UAAU,mBAA7D,gBACKuH,QADL,IACKA,OADL,EACKA,EAASnC,MAAK,SAACzI,EAAG0I,GAAJ,OAAUA,EAAEmC,gBAAkB7K,EAAE6K,mBAC1CZ,KAAI,SAAA9B,GAAM,OACP,eAAC,IAAD,CAA2BoE,YAAY,OAAOC,aAAa,OAAOxJ,SAAS,WAAWK,UAAU,oBAAhG,UACI,cAAC,IAAD,CAAKF,MAAM,OAAO7B,OAAO,OAAO0B,SAAS,WAAWC,KAAK,OAAOC,IAAI,MAAMvE,aAAa,MAAM8N,gBAAiBjB,GAAerD,EAAOF,uBAAwBtK,EAAMuB,UAClK,eAAC,IAAD,WACI,cAAC,KAAD,UAAQiJ,EAAOH,oBACf,cAAC,GAAD,CAAWR,UAAWW,EAAO2C,gBAAiBrD,UAAWU,EAAO0C,uBAJ9D1C,EAAO4C,gBCOxB2B,GAAY,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACjBhP,EAAQqO,cAEd,EAAgD5K,mBAAS,MAAzD,mBAAOwG,EAAP,KAAyBC,EAAzB,KACA,EAA8CzG,mBAAS,IAAvD,mBAAOwL,EAAP,KAAwBC,EAAxB,KACQzG,EAASD,YAAO,YAAY,SAAClG,GAAD,OAASF,EAAU,CAAEE,WAAjDmG,KACFoC,EAAQ,OAAGpC,QAAH,IAAGA,OAAH,EAAGA,EAAMoC,SACjBsE,EAAWH,EAAMhH,KAAKoH,SAAS,UACrC,OACI,eAAC,IAAD,CAAKC,GAAI,OAAT,UACI,eAAC,IAAD,CAAQtJ,QAAQ,OAAOZ,eAAe,gBAAtC,UACI,cAAC,IAAD,CAAS/E,KAAK,KAAd,uBACA,eAAC,IAAD,WACI,eAAC,IAAD,CACIkP,KAAK,QACLpJ,YAAY,MACZM,MAAOyI,EACP5I,SAAU,SAACC,GAAD,OAAO4I,EAAmB5I,EAAEC,OAAOC,QAJjD,UAMI,wBAAQA,MAAM,gBAAd,2BACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,aAAd,wBACA,wBAAQA,MAAM,WAAd,0BAEF2I,GAEE,cAAC,IAAD,CACItI,QAAS,kBAAMqD,EAAoB,KACnCpD,YAAY,QACZzG,MAAM,OAHV,gCAWZ,cAAC,GAAD,CACI2H,KAAI,mBAAciH,EAAe,0BAAsBA,GAAtB,IAEjChH,OAAQ,SAAC3G,GAAD,eACJ,eAAC,IAAD,CAAQ8D,WAAW,aAAaiK,GAAI,GAAItJ,QAAQ,OAAhD,WACMoJ,GAAY,cAAC,GAAD,CACVtE,SAAUA,EACVZ,iBAAkBA,EAClBC,oBAAqBA,EACrBC,YAAa7I,EAAM6H,YACnBf,WAAY9G,EAAM8G,WAClBgC,eAAgB9I,EAAMuH,eACtBP,cAAehH,EAAMgH,gBAGxBhH,EAAMqD,QACH,qCACI,cAAC,IAAD,CAAUhB,OAAO,QAAQ6B,MAAM,OAAO+J,WAAW,WAAWC,SAAS,aACrE,cAAC,IAAD,CAAU7L,OAAO,QAAQ6B,MAAM,OAAO+J,WAAW,WAAWC,SAAS,aACrE,cAAC,IAAD,CAAU7L,OAAO,QAAQ6B,MAAM,OAAO+J,WAAW,WAAWC,SAAS,gBAJ5E,OAOGlO,QAPH,IAOGA,GAPH,UAOGA,EAAOmH,YAPV,iBAOG,EAAagH,iBAPhB,aAOG,EACM3E,MAAK,SAACzI,EAAG0I,GAAJ,OAAUA,EAAE2E,kBAAoBrN,EAAEqN,qBACxCpD,KAAI,SAACmC,GAAD,OACD,cAAC,IAAD,CACI5H,QAAS,WACAsI,GAEDjF,EAAoBuE,IAG5BhJ,IAAK,CACDtB,WAAY,sBACZ,UAAW,CACP2K,gBAAiB,YAIzB/I,QAAS,EACTP,MAAM,OACNsH,EAAG,EACH6C,KAAK,QACL5C,OAAO,KACPC,YAAY,MACZhM,aAAa,KACb4O,KAAK,IACLjB,gBAAiBd,GACbY,EAASlE,eACTvK,EAAMuB,QAEVmN,gBAAgB,MAChBnB,OAAO,UA3BX,SA6BI,eAAC,IAAD,CAAMlB,gBAAgB,UAAU/H,IAAK,GAArC,UACI,eAAC,IAAD,CAAQc,WAAW,aAAnB,UACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAS9B,GAAG,KAAKlD,KAAK,KAAtB,SACKqO,EAASvC,eAEd,cAAC,GAAD,CACIrC,UAAW4E,EAASoB,kBACpB/F,UAAW2E,EAASiB,uBAG5B,cAAC,IAAD,CACIpM,GAAG,KACHlD,KAAK,KACLuN,WAAW,SACXtN,MAAM,OAJV,SAMKoO,EAASrC,sBAEd,cAAC,GAAD,CAAYqC,SAAUA,OAE1B,eAAC,IAAD,CAAQrJ,WAAW,aAAnB,UACI,cAAC,IAAD,CAAS9B,GAAG,KAAKlD,KAAK,KAAKC,MAAM,OAAjC,6BAIA,cAAC,GAAD,CAAQ0G,OAAQ0H,EAASlE,iBACzB,cAAC,IAAD,CAASjH,GAAG,KAAKlD,KAAK,KAAKC,MAAM,OAAjC,+BAGA,cAAC,IAAD,CACI4D,MAAO,CACHqJ,WAAY,QAFpB,gBAKKzC,QALL,IAKKA,OALL,EAKKA,EACK+B,QAAO,SAACL,GAAD,OACLkC,EAAShC,oBAAoB2C,SACzB7C,EAAQjD,cAGfgD,KAAI,SAACC,GAAD,OACD,cAAC,IAAD,UACKA,EAAQM,aADEN,EAAQjD,uBAvE/C,OAaSmF,QAbT,IAaSA,OAbT,EAaSA,EAAUlF,yBCxE1CuG,GAAe,SAAC,GAAmG,IAAjGC,EAAgG,EAAhGA,gBAAiBC,EAA+E,EAA/EA,mBAAoBC,EAA2D,EAA3DA,WAAY7H,EAA+C,EAA/CA,WAAY8H,EAAmC,EAAnCA,cAAe5H,EAAoB,EAApBA,cACvGxF,QAAQC,IAAI,gBAAiBuF,GAC7B,MAA4E2C,cAA5DkF,EAAhB,EAAQhF,OAA6BiF,EAArC,EAA6B/E,OAA8BgF,EAA3D,EAAkD9E,QAClD,EAA4EN,cAA5DO,EAAhB,EAAQL,OAA6BM,EAArC,EAA6BJ,OAA8BK,EAA3D,EAAkDH,QAC5C+E,EAAoB,WACtB5E,IACA6E,KAGJnJ,qBAAU,WAIN,OAHI2I,GACAK,IAEG,eAGR,CAACL,EAAiBK,IACrB,IAAMG,EAAmB,WACrBF,IACAL,EAAmB,OAEjBQ,EAAiB,WACnBR,EAAmB,MACnBK,KAEEI,EAAiB,uCAAG,sBAAApO,EAAA,sDACtB4N,EAAW,2BAAKF,GAAN,IAAuBW,eAA8B,OAAfX,QAAe,IAAfA,OAAA,EAAAA,EAAiBW,gBAAiB,gBAAiBF,GAD7E,2CAAH,qDAGvB,OAEI,eAAC,IAAD,CAAOrF,OAAQgF,EAAa5E,QAASgF,EAArC,UACI,cAAC,IAAD,IACA,eAAC,IAAD,WACI,cAAC,IAAD,UAAcR,GAAmBA,EAAgBzG,UAAY,eAAiB,mBAC9E,cAAC,IAAD,IACA,cAAC,IAAD,UACI,eAAC,IAAD,CAAQvD,QAAQ,OAAhB,UAEI,eAAC,IAAD,CAAaoG,GAAG,cAAhB,UACI,cAAC,KAAD,2BACA,cAAC,IAAD,CAAOjG,YAAY,eAAeC,KAAK,OAAOK,MAAOuJ,GAAmBA,EAAgBlD,YAAaxG,SAAU,SAACC,GAAD,OAAO0J,GAAmB,SAAArF,GAAI,kCAAUA,GAAV,IAAgBkC,YAAavG,EAAEC,OAAOC,YAC/KC,QAAS,SAACC,GACY,UAAdA,EAAMC,KACN8J,UAOhB,eAAC,IAAD,CAAatE,GAAG,qBAAhB,UACI,cAAC,KAAD,kCAEA,cAAC,KAAD,CAAUjG,YAAY,sBAClBM,MAAOuJ,GAAmBA,EAAgBY,mBAAoBtK,SAAU,SAACC,GAAD,OAAO0J,GAAmB,SAAArF,GAAI,kCAAUA,GAAV,IAAgBgG,mBAAoBrK,EAAEC,OAAOC,YACnJC,QAAS,SAACC,GACY,UAAdA,EAAMC,KACN8J,UAKhB,eAAC,IAAD,CAAatE,GAAG,gBAAhB,UACI,cAAC,KAAD,6BACA,eAAC,IAAD,CAAQjG,YAAY,cAAcM,OAAsB,OAAfuJ,QAAe,IAAfA,OAAA,EAAAA,EAAiBa,gBAAiB,cAAevK,SAAU,SAAAC,GAAC,OAAI0J,GAAmB,SAAArF,GAAI,kCAAUA,GAAV,IAAgB+F,cAAepK,EAAEC,OAAOC,YAAxK,UACI,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,uBAAd,kCACA,wBAAQA,MAAM,iBAAd,4BACA,wBAAQA,MAAM,eAAd,qCAQhB,eAAC,IAAD,WAEI,cAAC,IAAD,CACIK,QAAS4E,EACTQ,OAAO,mBACPwB,SAAU,cAACJ,EAAA,EAAD,IAHd,oBAMA,cAAC,KAAD,CACIlC,OAAQK,EAERD,QAASG,EAHb,SAKI,cAAC,IAAD,UACI,eAAC,KAAD,WACI,cAAC,IAAD,CAAmBzF,SAAS,KAAK0H,WAAW,OAA5C,4BAIA,eAAC,IAAD,8CACoC,cAAC,KAAD,CAAMrK,GAAG,IAAT,gBAAcyM,QAAd,IAAcA,OAAd,EAAcA,EAAiBlD,cADnE,QAIA,eAAC,IAAD,WACI,cAAC,IAAD,CAAQhG,QAAS6E,EAAjB,oBAGA,cAAC,IAAD,CAAQ9E,UAAW0B,EAAexB,YAAY,QAAQzG,MAAM,OAAOwG,QAAS,kBAAMqJ,EAAa,OAACH,QAAD,IAACA,OAAD,EAACA,EAAiBzG,UAAWgH,IAAoB1C,GAAI,EAApJ,8BAOhB,cAAC,IAAD,CAAQF,GAAI,EAAG7G,QAAS0J,EAAxB,mBAGA,cAAC,IAAD,CAAQ3J,UAAWwB,EAAYtB,YAAY,QAAQzG,MAAM,OAAOwG,QAAS4J,EAAzE,4BCnIPI,GAAW,SAAC,GAAa,IAAZ7B,EAAW,EAAXA,MAItB,EAA8CvL,mBAAS,MAAvD,mBAAOsM,EAAP,KAAwBC,EAAxB,KACA,EAA4CvM,mBAAS,IAArD,mBAAOqN,EAAP,KAAuBC,EAAvB,KACM5B,EAAWH,EAAMhH,KAAKoH,SAAS,UAErC,OACI,cAAC,IAAD,CAAKC,GAAI,OAAT,SACI,eAAC,IAAD,WACI,eAAC,IAAD,CAAQtJ,QAAQ,OAAOZ,eAAe,gBAAtC,UACI,cAAC,IAAD,CAAS/E,KAAK,KAAd,sBACA,eAAC,IAAD,WACA,eAAC,IAAD,CACIkP,KAAK,QACLpJ,YAAY,MACZM,MAAOsK,EACPzK,SAAU,SAACC,GAAD,OAAOyK,EAAkBzK,EAAEC,OAAOC,QAJhD,UAMI,wBAAQA,MAAM,cAAd,yBACA,wBAAQA,MAAM,uBAAd,kCACA,wBAAQA,MAAM,iBAAd,4BACA,wBAAQA,MAAM,eAAd,8BAEF2I,GAEF,cAAC,IAAD,CAAQ/O,KAAK,KAAKyG,QAAS,kBAAMmJ,EAAmB,KAAIlJ,YAAY,QAAQzG,MAAM,OAAlF,+BAOJ,cAAC,GAAD,CAEI2H,KAAI,kBAAa8I,EAAc,yBAAqBA,GAArB,IAC/B7I,OAAQ,SAAC3G,GAAD,OACJ,eAAC,IAAD,CAAQ8D,WAAW,aAAaiK,GAAI,GAAItJ,QAAQ,OAAhD,WACMoJ,GAEF,cAAC,GAAD,CAEIY,gBAAiBA,EACjBC,mBAAoBA,EACpBC,WAAY3O,EAAM6H,YAClB+G,cAAe5O,EAAMuH,eACrBT,WAAY9G,EAAM8G,WAClBE,cAAehH,EAAMgH,gBAGxBhH,EAAMqD,QACJ,qCACA,cAAC,IAAD,CAAUhB,OAAO,QAAQ6B,MAAM,OAAO+J,WAAW,WAAWC,SAAS,aACrE,cAAC,IAAD,CAAU7L,OAAO,QAAQ6B,MAAM,OAAO+J,WAAW,WAAWC,SAAS,gBAEtElO,EAAMmH,MACJnH,EAAMmH,KAAKoC,UACXvJ,EAAMmH,KAAKoC,SACNC,MAAK,SAACzI,EAAG0I,GAAJ,OAAUA,EAAEC,iBAAmB3I,EAAE2I,oBACtCsB,KAAI,SAACC,GAAD,OACD,cAAC,IAAD,CACIgB,OAAO,UACP1G,QAAS,WACAsI,GAEDa,EAAmBzD,IAI3BxG,QAAS,EACTP,MAAM,OACNsH,EAAG,EACHC,OAAO,KACPC,YAAY,MACZhM,aAAa,KACb4O,KAAK,IACLnK,IAAK,CACDtB,WAAY,sBACZ,UAAW,CACP2K,gBAAiB,YAnB7B,SAuBI,eAAC,IAAD,CAAQ1J,WAAW,eAAnB,UAEI,eAAC,IAAD,CAAQD,eAAe,gBAAvB,UACI,cAAC,IAAD,CAAS7B,GAAG,KAAKlD,KAAK,KAAtB,SACKmM,EAAQM,cAEb,cAAC,IAAD,UACI,cAAC,GAAD,CAAQ9F,OAAQwF,EAAQmE,qBAGhC,eAAC,IAAD,CAAQvL,eAAe,gBAAvB,UACI,cAAC,IAAD,CAAS7B,GAAG,KAAKlD,KAAK,KAAKuN,WAAW,SAAStN,MAAM,OAArD,SACKkM,EAAQoE,qBAEb,cAAC,GAAD,CAAW9G,UAAW0C,EAAQyE,iBAAkBlH,UAAWyC,EAAQvB,0BA7BtEuB,EAAQjD,0B,UCxDnD2H,GAAM,WACV,MAAyBzM,YAAgB,oBAAqB,IAAvD2C,EAAP,oBACMlC,EAAWiM,eAKX/B,EAAYlK,EAASkM,SAAS/B,SAAS,UAG7C,OADAtM,QAAQC,IAAI,WAAWkC,EAASkK,GAE9B,cAAC,IAAD,UACE,eAAC,IAAD,CAAKiC,UAAU,QAAf,UACGjK,GAED,cAAC,IAAD,CAAK2F,EAAG,EAAGd,kBAAkB,MAA7B,SACE,cAAC,IAAD,CAAWsD,KAAK,eAAhB,SACE,eAAC,IAAD,CAAQnK,eAAe,gBAAvB,UACE,eAAC,IAAD,CAAQY,QAAQ,OAAhB,UAEE,cAAC,IAAD,CAAMzC,GAAI+N,IAAYC,GAAE,UAAKnC,EAAQ,yBAArC,SACE,cAAC,IAAD,CACE7L,GAAG,KACHlD,KAAK,KACLC,MACwB,sBAAtB4E,EAASkM,UAA0D,MAAtBlM,EAASkM,SAClDnR,EAAMuB,OAAOE,MAAM,KACnB,eANR,yBAYF,cAAC,IAAD,CAAM6B,GAAI+N,IAAYC,GAAE,UAAKnC,EAAQ,aAAb,aAAxB,SACE,cAAC,IAAD,CAAS7L,GAAG,KAAKlD,KAAK,KACpBC,MAEwB,qBAAtB4E,EAASkM,UAAyD,cAAtBlM,EAASkM,SACjDnR,EAAMuB,OAAOE,MAAM,KACnB,eALR,4BAYF0N,GAEA,eAAC,IAAD,CAAQpJ,QAAQ,OAAhB,UACE,cAAC,IAAD,CAAMzC,GAAI+N,IAAYC,GAAG,oBAAoB/K,OAAO,SAApD,SACE,cAAC,IAAD,CAASjD,GAAG,KAAKlD,KAAK,KAAKuN,WAAW,SACpCtN,MACwB,sBAAtB4E,EAASkM,SACLnR,EAAMuB,OAAOE,MAAM,KACnB,eAJR,2BAUF,cAAC,IAAD,CAAQoF,QAzDT,WACb3E,aAAaqP,WAAW,qBACxBvM,OAAOC,SAAS0D,UAuDF,8BAOV,eAAC,IAAD,CAAW2G,KAAK,eAAhB,UACE,cAAC,EAAD,CAActH,KAAK,IAAIwJ,OAAK,EAACvK,UAAW8H,KACxC,cAAC,EAAD,CAAc/G,KAAK,YAAYwJ,OAAK,EAACvK,UAAW4J,KAChD,cAAC,IAAD,CAAO7I,KAAK,oBAAoBwJ,OAAK,EAACvK,UAAW8H,KACjD,cAAC,IAAD,CAAO/G,KAAK,mBAAmBwJ,OAAK,EAACvK,UAAW4J,cAO1DY,IAASxJ,OACP,eAAC,IAAMyJ,WAAP,WACE,cAAC,IAAD,CAAiBhR,iBAAkBV,EAAMS,OAAOC,mBAChD,cAAC,IAAD,CAAgBV,MAAOA,EAAvB,SACE,cAAC,IAAD,UACE,cAAC,GAAD,WAKN2R,SAASC,eAAe,SAM1BtK,M","file":"static/js/main.e23b6a9c.chunk.js","sourcesContent":["import { extendTheme, withDefaultColorScheme, withDefaultProps } from \"@chakra-ui/react\"\n// 2. Add your color mode config\nconst config = {\n  initialColorMode: \"dark\",\n  useSystemColorMode: false,\n\n\n}\n\nconst theme = extendTheme(\n  withDefaultProps({\n\n    defaultProps: {\n      size: \"sm\",\n      // colorScheme: \"brand\",\n      color: \"#fff\",\n\n    },\n    components: [\"Button\", \"TextArea\", \"Select\"],\n  }),\n  {\n    shadows: {\n      outline: \"0 0 0 3px #222222\"\n    },\n    config,\n    components: {\n      Input: {\n        sizes: {\n          sm: {\n            field: {\n              borderRadius: 'md'\n            },\n            addon: {\n              borderRadius: 'md'\n            }\n          },\n          baseStyle: {\n\n          }\n        }\n      },\n      Button: {\n        baseStyle: {\n          color: \"#fff\",\n        \n        }\n      },\n      Skeleton: {\n        baseStyle: {\n          bg: (props) => props.colors.gray[600]\n        }\n      },\n\n    },\n    colors: {\n      brand: {\n       100:'#FD5750',\n       200:'#FD5750',\n       300:'#FD5750',\n       400:'#FD5750',\n       500:'#FD5750',\n       600:'#FD5750',\n       700:'#FD5750',\n       800:'#FD5750',\n       900:'#FD5750'\n      },\n      gray: {\n        700: \"#141414\",\n        600: '#1d1d1d'\n      }\n    },\n\n    styles: {\n      global: (props) => ({\n        \"body\": {\n\n          fontFamily: \"body\",\n          // color: \"#fff\",\n          bg: '#141414',\n          // lineHeight: \"base\"\n        },\n        // button: {\n        //   color: '#fff'\n        // }\n\n      })\n    },\n\n  }\n  // ,withDefaultColorScheme({ colorScheme: \"brand\" })\n\n)\nexport default theme","\nconst baseURL = 'https://pleasent-package-3eqvi.cloud.serverless.com'\n\nconst getHeaders = (password) => ({\n    Authorization: `Bearer ${password || JSON.parse(localStorage.getItem(\"serverless-status\") || {}) || \"\"\n        }`,\n    \"Content-Type\": \"application/json\",\n});\nexport const apiClient = async ({ url, body, password, method = 'GET' }) => {\n    const res = await fetch(`${baseURL}/${url}`, {\n        method,\n        headers: getHeaders(password),\n        body\n    })\n    const json = await res.json()\n    if (res.ok) {\n\n        return json\n    } else {\n\n        console.log('err',json)\n        throw new Error(json.message)\n    }\n}\n\n\n","import { forwardRef } from \"@chakra-ui/react\";\nimport { createElement, useLayoutEffect, useRef, useState } from \"react\";\n\nexport const Collapsible = forwardRef(\n    ({ collapsed, as = \"div\", ...props }, outerRef) => {\n      const ref = useRef(outerRef);\n      const [height, setHeight] = useState(collapsed ? 0 : undefined);\n  \n      useLayoutEffect(() => {\n        if (ref.current === null) {\n          return;\n        }\n  \n        if (collapsed) {\n          setHeight(0);\n          return;\n        }\n  \n        setHeight(ref.current.scrollHeight);\n      }, [ref, collapsed]);\n  \n      return createElement(as, {\n        ...props,\n        ref,\n        style: {\n          overflow: \"hidden\",\n          transition: \"height 300ms ease-in-out\",\n          height,\n          display: \"grid\",\n          gridTemplateColumns: \"auto min-content\",\n          gap: \"15px\",\n          ...props.style,\n        },\n      });\n    }\n  );","export default __webpack_public_path__ + \"static/media/serverless-cloud-text.70f41d4b.svg\";","export default __webpack_public_path__ + \"static/media/cloud-dots.c54316c8.svg\";","import { Alert, AlertIcon, Box, Button, Center, Heading, Input, VStack } from \"@chakra-ui/react\"\nimport { useState } from \"react\"\n\nimport { useLocalStorage } from \"react-use\";\nimport { apiClient } from \"./api\";\nimport { Collapsible } from \"./components/Collapsible\";\nimport ServerlessCloudLogo from './assets/serverless-cloud-text.svg'\nimport CloudDots from './assets/cloud-dots.svg'\n\nexport const Login = () => {\n\n    const [, setStoredPassword] = useLocalStorage('serverless-status', '');\n    const [password, setPassword] = useState('')\n    const [loading, setloading] = useState(false)\n    const [errorMessage, setErrorMessage] = useState('')\n    const login = async () => {\n        if (!password) {\n            setErrorMessage('Please enter password value')\n            return\n        }\n\n\n        try {\n            setloading(true)\n            await apiClient({ url: 'auth', password })\n\n            setStoredPassword(password)\n            window.location.href = '/'\n        } catch (e) {\n            console.log('eeeeeee', e)\n            setErrorMessage(e.message)\n\n        }\n        setloading(false)\n    }\n    return (\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n              <Box\n               position=\"absolute\"\n               left=\"0\"\n               top=\"350px\"\n               z-index=\"-1\"\n               display=\"flex\"\n               justifyContent=\"space-between\"\n               width=\"100%\"\n               css={{\n                   'img:nth-child(2)': {\n                    '-webkit-transform': 'scaleX(-1)',\n                    transform: 'scaleX(-1)'\n                   }\n               }}\n              >\n        <img src={CloudDots} alt=\"Serverless Cloud\" />\n        <img src={CloudDots} alt=\"Serverless Cloud\" />\n      </Box>\n            <Center h=\"100vh\" color=\"white\">\n                \n                <VStack spacing=\"24px\" >\n                <img src={ServerlessCloudLogo} alt=\"Serverless Cloud\" />\n\n                    <Heading size=\"xl\" fontSize=\"80px\">status.serverless.com</Heading>\n                    <Heading size=\"lg\">Login</Heading>\n                    <Input placeholder=\"Password\" type=\"password\" \n                    maxWidth=\"400px\"\n                    onChange={e => {\n                        setPassword(e.target.value)\n                        setErrorMessage('')\n                    }}\n                        onKeyUp={(event) => {\n                            if (event.key === \"Enter\") {\n                                login()\n                            }\n                        }}\n                    />\n                    <Button \n                    maxWidth=\"400px\"\n                    isLoading={loading} onClick={login} size=\"md\" width=\"100%\" colorScheme=\"brand\" color=\"#fff\">Login</Button>\n                    <Collapsible collapsed={!errorMessage}>\n                        <Alert status=\"error\">\n                            <AlertIcon />\n                            {errorMessage}\n                        </Alert>\n                    </Collapsible>\n\n                </VStack>\n            </Center>\n\n\n        </Box >\n    )\n}\n\n","import { useEffect } from \"react\";\nimport { useLocalStorage } from 'react-use';\nimport { Route } from 'react-router-dom';\nimport { Login } from \"./Login\";\nexport const PrivateRoute = ({ component, ...options }) => {\n  const [storedPassword, setStoredPassword] = useLocalStorage('serverless-status', '');\n  \n  useEffect(() => {\n  \n  }, []);\n\n \n  let FinalComponent = Login;\n  // let FinalComponent = component;\n\n  /**\n   * You're logged in and setup, just use the component specified for the route\n   */\n  console.log('storedPassword',storedPassword)\n  if (storedPassword) {\n    FinalComponent = component;\n  }\n\n  return <Route {...options} component={FinalComponent} />;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport { useToast } from \"@chakra-ui/react\"\nimport { useState } from \"react\"\nimport useSWR, { mutate } from \"swr\"\nimport { apiClient } from \"./api\"\n\nexport const Resource = ({path, render}) => {\n    const toast = useToast()\n    const [loadingAdd, setLoadingAdd] = useState(null)\n    const [loadingDelete, setLoadingDelete] = useState(null)\n    const { data, error } = useSWR(path, (url) => apiClient({ url }))\n    const loading = !data && !error\n    \n    const reload = () => mutate(path)\n    const deleteResource = async (resourceId, next) => {\n        try {\n            setLoadingDelete(resourceId)\n            await apiClient({\n                url: `${path}/${resourceId}`, method: 'DELETE'\n            })\n            await reload()\n            toast({\n                title: `Item deleted successfully`,\n                status: \"success\",\n                duration: 5000,\n                isClosable: true,\n            })\n            setLoadingDelete(null)\n            if (next) {\n                next()\n            }\n        } catch (e) {\n            setLoadingDelete(null)\n            toast({\n                title: e.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            })\n        }\n    }\n    const addResource = async (resource, next) => {\n        try {\n            setLoadingAdd(true)\n            await apiClient({\n                url: `${path}`, method: 'PUT',\n                body: JSON.stringify(resource)\n            })\n            await reload()\n            setLoadingAdd(null)\n            if (!resource?.serviceId && !resource.incidentId) {\n\n                toast({\n                    title: `Item created successfully`,\n                    status: \"success\",\n                    duration: 5000,\n                    isClosable: true,\n                })\n            }\n            if (next) {\n                next()\n            }\n        } catch (e) {\n            setLoadingAdd(null)\n            toast({\n                title: e.message,\n                status: \"error\",\n                duration: 5000,\n                isClosable: true,\n            })\n        }\n\n    }\n    return render({\n        data,\n        error,\n        loading,\n        reload,\n        deleteResource,\n        loadingDelete,\n        addResource,\n        loadingAdd\n    })\n}","import { Text } from '@chakra-ui/react';\nimport dayjs from 'dayjs';\nconst relativeTime = require('dayjs/plugin/relativeTime');\n\ndayjs.extend(relativeTime);\n\nexport const UpdatedAt = ({updatedAt, createdAt}) => {\n    return (\n        <Text color=\"grey\" fontSize=\"xs\">\n\n        {createdAt !== updatedAt\n            ? `Updated ${dayjs(updatedAt).fromNow()}`\n            : `Created ${dayjs(createdAt).fromNow()}`}\n        \n    </Text>\n    )\n}","import { DeleteIcon } from \"@chakra-ui/icons\";\nimport {\n    Button,\n    Text,\n    FormControl,\n    FormLabel,\n    Input,\n    Select,\n    VStack,\n    Textarea,\n    Checkbox,\n    Grid,\n    Box,\n    Drawer,\n    DrawerOverlay,\n    DrawerContent,\n    DrawerHeader,\n    DrawerBody,\n    DrawerFooter,\n    useDisclosure,\n    DrawerCloseButton,\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    Divider,\n    HStack,\n    Spinner,\n} from \"@chakra-ui/react\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport useSWR from \"swr\";\nimport { apiClient } from \"./api\";\n\nimport { Resource } from \"./Resource\";\nimport { UpdatedAt } from \"./UpdatedAt\";\n\nexport const IncidentDrawer = ({\n    selectedIncident,\n    setSelectedIncident,\n    addIncident,\n    deleteIncident,\n    loadingDelete,\n    loadingAdd,\n}) => {\n    const [update, setUpdate] = useState({\n        updateDescription: \"\",\n        affectedServicesStatus: undefined,\n        incidentStatus: selectedIncident?.incidentStatus,\n    });\n    const incidentStatus = useMemo(\n        () => selectedIncident?.incidentStatus,\n        [selectedIncident]\n    );\n    useEffect(() => {\n        if (incidentStatus) {\n            setUpdate((prev) => ({\n                ...prev,\n                incidentStatus,\n            }));\n        }\n        return () => { };\n    }, [incidentStatus, setUpdate]);\n    const { data: servicesData } = useSWR(\"services\", (url) =>\n        apiClient({ url })\n    );\n\n    const services = servicesData\n        ? servicesData.services.sort(\n            (a, b) => b.serviceCreatedAt - a.serviceCreatedAt\n        )\n        : [];\n    const {\n        isOpen: isDrawerOpen,\n        onOpen: onDrawerOpen,\n        onClose: onDrawerClose,\n    } = useDisclosure();\n    const {\n        isOpen: isAlertOpen,\n        onOpen: onAlertOpen,\n        onClose: onAlertClose,\n    } = useDisclosure();\n\n    const addUpdateNext = () => {\n        setUpdate({\n            updateDescription: \"\",\n            affectedServicesStatus: undefined,\n            incidentStatus: selectedIncident?.incidentStatus,\n        });\n        \n    };\n    const deleteIncidentNext = () => {\n        onAlertClose();\n        handleDrawerClose();\n    };\n    useEffect(() => {\n        if (selectedIncident) {\n            onDrawerOpen();\n        }\n        return () => { };\n    }, [selectedIncident, onDrawerOpen]);\n    const handleDrawerClose = () => {\n        onDrawerClose();\n        setSelectedIncident(null);\n    };\n\n    const handleSaveIncident = async () => {\n        addIncident(\n            {\n                ...selectedIncident,\n                incidentStatus: selectedIncident?.incidentStatus || \"Investigating\",\n            },\n            handleDrawerClose\n        );\n    };\n\n    return (\n        <>\n            <Drawer\n                placement=\"right\"\n                onClose={handleDrawerClose}\n                isOpen={isDrawerOpen}\n                size=\"md\"\n                colorScheme=\"brand\"\n            >\n                <DrawerOverlay />\n                <DrawerContent>\n                    <DrawerHeader borderBottomWidth=\"1px\">\n                        <DrawerCloseButton margin=\"auto\" />\n                        {selectedIncident?.incidentName || \"Create Incindent\"}\n                    </DrawerHeader>\n                    <DrawerBody>\n                        <VStack spacing=\"24px\">\n                            <FormControl id=\"incidentName\">\n                                <FormLabel>Incident Name</FormLabel>\n                                <Input\n                                    placeholder=\"Incident Name\"\n                                    type=\"text\"\n                                    value={selectedIncident?.incidentName || \"\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentName: e.target.value,\n                                        }))\n                                    }\n                                    onKeyUp={(event) => {\n                                        if (event.key === \"Enter\") {\n                                            handleSaveIncident();\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl id=\"incidentDescription\">\n                                <FormLabel>Incident Description</FormLabel>\n\n                                <Textarea\n                                    placeholder=\"Incident Description\"\n                                    value={selectedIncident?.incidentDescription || \"\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentDescription: e.target.value,\n                                        }))\n                                    }\n                                    onKeyUp={(event) => {\n                                        if (event.key === \"Enter\") {\n                                            handleSaveIncident();\n                                        }\n                                    }}\n                                />\n                            </FormControl>\n                            <FormControl id=\"incidentStatus\">\n                                <FormLabel>Incident Status</FormLabel>\n\n                                <Select\n                                    placeholder=\"Investigating\"\n                                    value={selectedIncident?.incidentStatus || \"Investigating\"}\n                                    onChange={(e) =>\n                                        setSelectedIncident((prev) => ({\n                                            ...prev,\n                                            incidentStatus: e.target.value,\n                                        }))\n                                    }\n                                >\n                                    <option value=\"Investigating\">Investigating</option>\n                                    <option value=\"Identified\">Identified</option>\n                                    <option value=\"Monitoring\">Monitoring</option>\n                                    <option value=\"Resolved\">Resolved</option>\n                                </Select>\n                            </FormControl>\n                            <FormControl id=\"affectedServicesIds\">\n                                <FormLabel>Affected Services</FormLabel>\n                                <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n                                    {services &&\n                                        services.map((service) => (\n                                            <Box key={service.serviceId}>\n                                                <Checkbox\n                                                    isChecked={\n                                                        !!selectedIncident?.affectedServicesIds?.find(\n                                                            (id) => id === service.serviceId\n                                                        )\n                                                    }\n                                                    onChange={(e) =>\n                                                        setSelectedIncident((prev) => ({\n                                                            ...prev,\n                                                            affectedServicesIds: e.target.checked\n                                                                ? [\n                                                                    ...(prev.affectedServicesIds || []),\n                                                                    service.serviceId,\n                                                                ]\n                                                                : prev.affectedServicesIds?.filter(\n                                                                    (id) => id !== service.serviceId\n                                                                ),\n                                                        }))\n                                                    }\n                                                >\n                                                    {service.serviceName}\n                                                </Checkbox>\n                                            </Box>\n                                        ))}\n                                </Grid>\n                            </FormControl>\n                            {selectedIncident?.incidentId && (\n                                <Resource\n                                    path={`incidents/${selectedIncident?.incidentId}/updates`}\n                                    render={(props) => (\n                                        <Box\n                                            width=\"100%\"\n                                            p={5}\n                                            shadow=\"md\"\n                                            borderWidth=\"1px\"\n                                            borderRadius=\"md\"\n                                        >\n                                            <VStack spacing=\"24px\">\n                                                <FormControl id=\"updateDescription\">\n                                                    <FormLabel>Update Description</FormLabel>\n\n                                                    <Textarea\n                                                        placeholder=\"Update Description\"\n                                                        value={update?.updateDescription || \"\"}\n                                                        onChange={(e) =>\n                                                            setUpdate((prev) => ({\n                                                                ...prev,\n                                                                updateDescription: e.target.value,\n                                                            }))\n                                                        }\n                                                        onKeyUp={(event) => {\n                                                            if (event.key === \"Enter\") {\n                                                                props.addResource(update, addUpdateNext);\n                                                            }\n                                                        }}\n                                                    />\n                                                </FormControl>\n                                                <FormControl id=\"updateAffectedServicesStatus\">\n                                                    <FormLabel>Update Affected Services Status</FormLabel>\n\n                                                    <Select\n                                                        placeholder=\"Don't change affected services status\"\n                                                        value={update?.affectedServicesStatus}\n                                                        onChange={(e) =>\n                                                            setUpdate((prev) => ({\n                                                                ...prev,\n                                                                affectedServicesStatus: e.target.value,\n                                                            }))\n                                                        }\n                                                    >\n                                                        <option value=\"Operational\">Operational</option>\n                        <option value=\"Degraded Performance\">Degraded Performance</option>\n                        <option value=\"Partial Outage\">Partial Outage</option>\n                        <option value=\"Major Outage\">Major Outage</option>\n                                                    </Select>\n                                                </FormControl>\n                                                <FormControl id=\"updateAffectedServicesStatus\">\n                                                    <HStack justifyContent=\"flex-end\">\n\n                                                        <Button\n                                                            isLoading={props.loadingAdd}\n                                                            onClick={() =>\n                                                                props.addResource(update, addUpdateNext)\n                                                            }\n                                                            colorScheme=\"brand\"\n                                                            color=\"#fff\"\n                                                        >\n                                                            Post Update\n                                                        </Button>\n                                                    </HStack>\n                                                </FormControl>\n                                                <Divider />\n                                                {props.data?.updates\n                                                    ?.sort(\n                                                        (a, b) => b.updateCreatedAt - a.updateCreatedAt\n                                                    )\n                                                    .map((update) => (\n                                                        <HStack\n                                                            justifyContent=\"space-between\"\n                                                            key={update.updateId}\n                                                            width=\"100%\"\n                                                            p={5}\n                                                            shadow=\"md\"\n                                                            borderWidth=\"1px\"\n                                                            borderRadius=\"md\"\n                                                        >\n                                                            <Text>{update?.updateDescription}</Text>\n                                                            <HStack>\n                                                                <UpdatedAt\n                                                                    updatedAt={update.updateUpdatedAt}\n                                                                    createdAt={update.updateCreatedAt}\n                                                                />\n\n                                                                {props.loadingDelete === update.updateId ? (\n                                                                    <Spinner size=\"xs\" margin=\"auto 5px\" />\n                                                                ) : (\n                                                                    <DeleteIcon\n                                                                        size=\"xs\"\n                                                                        marginLeft=\"5px\"\n                                                                        cursor=\"pointer\"\n                                                                        onClick={() =>\n                                                                            props.deleteResource(update.updateId)\n                                                                        }\n                                                                    />\n                                                                )}\n                                                            </HStack>\n                                                        </HStack>\n                                                    ))}\n                                            </VStack>\n                                        </Box>\n                                    )}\n                                />\n                            )}\n                        </VStack>\n                    </DrawerBody>\n                    <DrawerFooter borderTopWidth=\"1px\">\n                        <Button\n                            onClick={onAlertOpen}\n                            margin=\"auto auto auto 0\"\n                            leftIcon={<DeleteIcon />}\n\n                        >\n                            Delete\n                        </Button>\n                        <Button mr={3} onClick={handleDrawerClose}>\n                            Close\n                        </Button>\n                        <Button\n                            isLoading={loadingAdd}\n                            colorScheme=\"brand\"\n                            color=\"#fff\"\n                            onClick={handleSaveIncident}\n                        >\n                            {selectedIncident && selectedIncident.incidentId\n                                ? \"Save\"\n                                : \"Create\"}\n                        </Button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n            {selectedIncident && (\n                <AlertDialog isOpen={isAlertOpen} onClose={onAlertClose}>\n                    <AlertDialogOverlay>\n                        <AlertDialogContent>\n                            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                                Delete Incident\n                            </AlertDialogHeader>\n\n                            <AlertDialogBody>\n                                Are you sure you want to delete{\" \"}\n                                <Text as=\"b\">{selectedIncident?.incidentName}</Text> ?\n                            </AlertDialogBody>\n\n                            <AlertDialogFooter>\n                                <Button onClick={onAlertClose}>Cancel</Button>\n                                <Button\n                                    isLoading={loadingDelete}\n                                    colorScheme=\"red\"\n                                    color=\"#fff\"\n                                    onClick={() =>\n                                        deleteIncident(\n                                            selectedIncident?.incidentId,\n                                            deleteIncidentNext\n                                        )\n                                    }\n                                    ml={3}\n                                >\n                                    Delete\n                                </Button>\n                            </AlertDialogFooter>\n                        </AlertDialogContent>\n                    </AlertDialogOverlay>\n                </AlertDialog>\n            )}\n        </>\n    );\n};\n","export const getStatusColor = (status, colors = {}) =>\n{\n    const num = 500\n    return status === \"Operational\" || status === \"Resolved\"\n    ? colors?.green[num] || \"green\"\n    : status === \"Degraded Performance\"\n    ? colors?.yellow[num] || \"yellow\"\n    : status === \"Partial Outage\" || status === \"Identified\"\n    ? colors?.orange[num] || \"orange\"\n    : status === \"Monitoring\"\n    ? colors.blue[num] || \"blue\"\n    : colors.red[num] || \"red\";\n}\n  \n","import { Box, Tag, Text } from '@chakra-ui/react';\nimport { useTheme } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport { getStatusColor } from './utils';\nconst relativeTime = require('dayjs/plugin/relativeTime');\n\ndayjs.extend(relativeTime);\n\nexport const Status = ({status}) => {\n    const theme = useTheme()\n    return (\n        <Tag>\n        <Box\n          width=\"10px\"\n          height=\"10px\"\n          style={{\n            background: getStatusColor(status, theme.colors),\n            borderRadius: \"50%\",\n            marginRight: \"10px\",\n          }}\n        />\n        <Text  fontSize=\"xs\">\n\n        {status}\n        </Text>\n      </Tag>\n    )\n}","import { Box, Text } from \"@chakra-ui/react\"\nimport { useTheme } from \"@emotion/react\"\nimport useSWR from \"swr\"\nimport { apiClient } from \"./api\"\nimport { UpdatedAt } from \"./UpdatedAt\"\nimport { getStatusColor } from \"./utils\"\n\nexport const UpdatesRow = ({ incident }) => {\n    const theme = useTheme()\n    const { data } = useSWR(`incidents/${incident?.incidentId}/updates`, (url) => apiClient({ url }))\n    const updates = data?.updates\n    console.log('updates', updates)\n    return (\n\n        <Box borderLeftWidth=\"1px\" borderLeftColor=\"grey\"  transform=\"translateY(10px)\">\n            {updates?.sort((a, b) => b.updateCreatedAt - a.updateCreatedAt)\n                .map(update => (\n                    <Box key={update.updateId} paddingLeft=\"20px\" marginBottom=\"10px\" position=\"relative\" transform=\"translateY(-10px)\">\n                        <Box width=\"10px\" height=\"10px\" position=\"absolute\" left=\"-5px\" top=\"8px\" borderRadius=\"50%\" backgroundColor={getStatusColor(update.affectedServicesStatus, theme.colors)} />\n                        <Box >\n                            <Text >{update.updateDescription}</Text>\n                            <UpdatedAt updatedAt={update.updateUpdatedAt} createdAt={update.updateCreatedAt} />\n                        </Box>\n                    </Box>\n                ))}\n        </Box>\n    )\n}","import {\n    Box,\n    Heading,\n    HStack,\n    ListItem,\n    Grid,\n    VStack,\n    Button,\n    UnorderedList,\n    Skeleton,\n    Select,\n} from \"@chakra-ui/react\";\nimport { useTheme } from \"@emotion/react\";\nimport { useState } from \"react\";\nimport useSWR from \"swr\";\nimport { apiClient } from \"./api\";\nimport { IncidentDrawer } from \"./IncidentDrawer\";\n\nimport { Resource } from \"./Resource\";\nimport { Status } from \"./Status\";\nimport { UpdatedAt } from \"./UpdatedAt\";\nimport { UpdatesRow } from \"./UpdatesRow\";\nimport { getStatusColor } from \"./utils\";\n\nexport const Incidents = ({match}) => {\n    const theme = useTheme();\n\n    const [selectedIncident, setSelectedIncident] = useState(null);\n    const [filterIncidents, setFilterIncidents] = useState(\"\");\n    const { data } = useSWR(\"services\", (url) => apiClient({ url }));\n    const services = data?.services;\n    const isPublic = match.path.includes('public')\n    return (\n        <Box mt={\"30px\"}>\n            <HStack spacing=\"24px\" justifyContent=\"space-between\">\n                <Heading size=\"lg\">Incidents</Heading>\n                <HStack>\n                    <Select\n                        maxW=\"120px\"\n                        placeholder=\"All\"\n                        value={filterIncidents}\n                        onChange={(e) => setFilterIncidents(e.target.value)}\n                    >\n                        <option value=\"Investigating\">Investigating</option>\n                        <option value=\"Identified\">Identified</option>\n                        <option value=\"Monitoring\">Monitoring</option>\n                        <option value=\"Resolved\">Resolved</option>\n                    </Select>\n                    {!isPublic &&\n\n                        <Button\n                            onClick={() => setSelectedIncident({})}\n                            colorScheme=\"brand\"\n                            color=\"#fff\"\n                        >\n                            New Incident\n                        </Button>\n                    }\n                </HStack>\n            </HStack>\n\n            <Resource\n                path={`incidents${filterIncidents ? `?incidentStatus=${filterIncidents}` : ``\n                    }`}\n                render={(props) => (\n                    <VStack alignItems=\"flex-start\" mt={25} spacing=\"24px\">\n                        {!isPublic && <IncidentDrawer\n                            services={services}\n                            selectedIncident={selectedIncident}\n                            setSelectedIncident={setSelectedIncident}\n                            addIncident={props.addResource}\n                            loadingAdd={props.loadingAdd}\n                            deleteIncident={props.deleteResource}\n                            loadingDelete={props.loadingDelete}\n                        />}\n\n                        {props.loading ? (\n                            <>\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                                <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\" />\n                            </>\n                        ) : (\n                            props?.data?.incidents\n                                ?.sort((a, b) => b.incidentCreatedAt - a.incidentCreatedAt)\n                                .map((incident) => (\n                                    <Box\n                                        onClick={() => {\n                                            if (!isPublic) {\n\n                                                setSelectedIncident(incident);\n                                            }\n                                        }}\n                                        css={{\n                                            transition: \"all .3s ease-in-out\",\n                                            \"&:hover\": {\n                                                backgroundColor: '#1D1D1D',\n                                            },\n                                        }}\n                                        key={incident?.incidentId}\n                                        spacing={8}\n                                        width=\"100%\"\n                                        p={5}\n                                        minH=\"210px\"\n                                        shadow=\"md\"\n                                        borderWidth=\"1px\"\n                                        borderRadius=\"md\"\n                                        flex=\"1\"\n                                        borderLeftColor={getStatusColor(\n                                            incident.incidentStatus,\n                                            theme.colors\n                                        )}\n                                        borderLeftWidth=\"5px\"\n                                        cursor=\"pointer\"\n                                    >\n                                        <Grid templateColumns=\"2fr 1fr\" gap={10}>\n                                            <VStack alignItems=\"flex-start\">\n                                                <HStack>\n                                                    <Heading as=\"h2\" size=\"md\">\n                                                        {incident.incidentName}\n                                                    </Heading>\n                                                    <UpdatedAt\n                                                        updatedAt={incident.incidentUpdatedAt}\n                                                        createdAt={incident.incidentCreatedAt}\n                                                    />\n                                                </HStack>\n                                                <Heading\n                                                    as=\"h5\"\n                                                    size=\"sm\"\n                                                    fontWeight=\"normal\"\n                                                    color=\"grey\"\n                                                >\n                                                    {incident.incidentDescription}\n                                                </Heading>\n                                                <UpdatesRow incident={incident} />\n                                            </VStack>\n                                            <VStack alignItems=\"flex-start\">\n                                                <Heading as=\"h5\" size=\"sm\" color=\"grey\">\n                                                    Incident Status\n                                                </Heading>\n\n                                                <Status status={incident.incidentStatus} />\n                                                <Heading as=\"h5\" size=\"sm\" color=\"grey\">\n                                                    Affected Services\n                                                </Heading>\n                                                <UnorderedList\n                                                    style={{\n                                                        marginLeft: \"20px\",\n                                                    }}\n                                                >\n                                                    {services\n                                                        ?.filter((service) =>\n                                                            incident.affectedServicesIds.includes(\n                                                                service.serviceId\n                                                            )\n                                                        )\n                                                        .map((service) => (\n                                                            <ListItem key={service.serviceId}>\n                                                                {service.serviceName}\n                                                            </ListItem>\n                                                        ))}\n                                                </UnorderedList>\n                                            </VStack>\n                                        </Grid>\n                                    </Box>\n                                ))\n                        )}\n                    </VStack>\n                )}\n            />\n        </Box>\n    );\n};\n","import { DeleteIcon } from \"@chakra-ui/icons\"\nimport {\n    Modal,\n    ModalOverlay,\n    ModalContent,\n    ModalHeader,\n    ModalFooter,\n    ModalBody,\n    ModalCloseButton,\n    Button,\n    Text,\n    FormControl,\n    FormLabel,\n    Input,\n    Select,\n    VStack,\n    Textarea,\n    AlertDialog,\n    AlertDialogOverlay,\n    AlertDialogContent,\n    AlertDialogHeader,\n    AlertDialogBody,\n    AlertDialogFooter,\n    useDisclosure,\n} from \"@chakra-ui/react\"\nimport { useEffect } from \"react\";\n\nexport const ServiceModal = ({ selectedService, setSelectedService, addService, loadingAdd, deleteService, loadingDelete }) => {\n    console.log('loadingDelete', loadingDelete)\n    const { isOpen: isModalOpen, onOpen: onModalOpen, onClose: onModalClose } = useDisclosure();\n    const { isOpen: isAlertOpen, onOpen: onAlertOpen, onClose: onAlertClose } = useDisclosure();\n    const deleteServiceNext = () => {\n        onAlertClose()\n        handleModalClose()\n        \n    }\n    useEffect(() => {\n        if (selectedService) {\n            onModalOpen()\n        }\n        return () => {\n\n        }\n    }, [selectedService, onModalOpen])\n    const handleModalClose = () => {\n        onModalClose()\n        setSelectedService(null)\n    }\n    const addServiceNext = () => {\n        setSelectedService(null)\n        onModalClose()\n    }\n    const handleSaveService = async () => {\n        addService({ ...selectedService, serviceStatus: selectedService?.serviceStatus || 'Operational' }, addServiceNext)\n    }\n    return (\n\n        <Modal isOpen={isModalOpen} onClose={handleModalClose}>\n            <ModalOverlay />\n            <ModalContent>\n                <ModalHeader>{selectedService && selectedService.serviceId ? 'Edit Service' : 'Create Service'}</ModalHeader>\n                <ModalCloseButton />\n                <ModalBody>\n                    <VStack spacing=\"24px\">\n\n                        <FormControl id=\"serviceName\">\n                            <FormLabel>Service Name</FormLabel>\n                            <Input placeholder=\"Service Name\" type=\"text\" value={selectedService && selectedService.serviceName} onChange={(e) => setSelectedService(prev => ({ ...prev, serviceName: e.target.value }))}\n                                onKeyUp={(event) => {\n                                    if (event.key === \"Enter\") {\n                                        handleSaveService()\n                                    }\n                                }}\n\n                            />\n\n                        </FormControl>\n                        <FormControl id=\"serviceDescription\">\n                            <FormLabel>Service Description</FormLabel>\n\n                            <Textarea placeholder=\"Service Description\"\n                                value={selectedService && selectedService.serviceDescription} onChange={(e) => setSelectedService(prev => ({ ...prev, serviceDescription: e.target.value }))}\n                                onKeyUp={(event) => {\n                                    if (event.key === \"Enter\") {\n                                        handleSaveService()\n                                    }\n                                }}\n                            />\n                        </FormControl>\n                        <FormControl id=\"serviceStatus\">\n                            <FormLabel>Service Status</FormLabel>\n                            <Select placeholder=\"Operational\" value={selectedService?.ServiceStatus || 'Operational'} onChange={e => setSelectedService(prev => ({ ...prev, serviceStatus: e.target.value }))}>\n                                <option value=\"Operational\">Operational</option>\n                                <option value=\"Degraded Performance\">Degraded Performance</option>\n                                <option value=\"Partial Outage\">Partial Outage</option>\n                                <option value=\"Major Outage\">Major Outage</option>\n                            </Select>\n\n                        </FormControl>\n                    </VStack>\n                </ModalBody>\n\n            \n                <ModalFooter>\n\n                    <Button\n                        onClick={onAlertOpen}\n                        margin=\"auto auto auto 0\"\n                        leftIcon={<DeleteIcon />}  >\n                        Delete\n                    </Button>\n                    <AlertDialog\n                        isOpen={isAlertOpen}\n\n                        onClose={onAlertClose}\n                    >\n                        <AlertDialogOverlay>\n                            <AlertDialogContent>\n                                <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n                                    Delete Service\n                                </AlertDialogHeader>\n\n                                <AlertDialogBody>\n                                    Are you sure you want to delete <Text as=\"b\">{selectedService?.serviceName}</Text> ?\n                                </AlertDialogBody>\n\n                                <AlertDialogFooter>\n                                    <Button onClick={onAlertClose}>\n                                        Cancel\n                                    </Button>\n                                    <Button isLoading={loadingDelete} colorScheme=\"brand\" color=\"#fff\" onClick={() => deleteService(selectedService?.serviceId, deleteServiceNext)} ml={3}>\n                                        Delete\n                                    </Button>\n                                </AlertDialogFooter>\n                            </AlertDialogContent>\n                        </AlertDialogOverlay>\n                    </AlertDialog>\n                    <Button mr={3} onClick={handleModalClose}>\n                        Close\n                    </Button>\n                    <Button isLoading={loadingAdd} colorScheme=\"brand\" color=\"#fff\" onClick={handleSaveService}>Save</Button>\n                </ModalFooter>\n            </ModalContent>\n\n        </Modal>\n    )\n}","import { Heading, Button, HStack, VStack, Box, Select, Skeleton } from \"@chakra-ui/react\";\nimport { useState } from \"react\";\n\n\nimport { ServiceModal } from \"./ServiceModal\";\nimport { Resource } from \"./Resource\";\nimport { Status } from \"./Status\";\nimport { UpdatedAt } from \"./UpdatedAt\";\n\nexport const Services = ({match}) => {\n    \n\n\n    const [selectedService, setSelectedService] = useState(null);\n    const [filterServices, setFilterServices] = useState('');\n    const isPublic = match.path.includes('public')\n    \n    return (\n        <Box mt={\"30px\"}>\n            <Box>\n                <HStack spacing=\"24px\" justifyContent=\"space-between\">\n                    <Heading size=\"lg\">Services</Heading>\n                    <HStack >\n                    <Select\n                        maxW=\"120px\"\n                        placeholder=\"All\"\n                        value={filterServices}\n                        onChange={(e) => setFilterServices(e.target.value)}\n                    >\n                        <option value=\"Operational\">Operational</option>\n                        <option value=\"Degraded Performance\">Degraded Performance</option>\n                        <option value=\"Partial Outage\">Partial Outage</option>\n                        <option value=\"Major Outage\">Major Outage</option>\n                    </Select>\n                    {!isPublic && \n                    \n                    <Button size=\"sm\" onClick={() => setSelectedService({})}colorScheme=\"brand\" color=\"#fff\" >\n                        New Service\n                    </Button>\n                    }\n                        </HStack>\n                </HStack>\n\n                <Resource\n\n                    path={`services${filterServices ? `?serviceStatus=${filterServices}` : ``}`}\n                    render={(props) => (\n                        <VStack alignItems=\"flex-start\" mt={25} spacing=\"24px\">\n                            {!isPublic && \n                            \n                            <ServiceModal\n\n                                selectedService={selectedService}\n                                setSelectedService={setSelectedService}\n                                addService={props.addResource}\n                                deleteService={props.deleteResource}\n                                loadingAdd={props.loadingAdd}\n                                loadingDelete={props.loadingDelete}\n                            />\n                            }\n                            {props.loading ? \n                               <>\n                               <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\"/>\n                               <Skeleton height=\"125px\" width=\"100%\" startColor=\"grey.700\" endColor=\"grey.800\"/>\n                           </>\n                            : props.data &&\n                                props.data.services &&\n                                props.data.services\n                                    .sort((a, b) => b.serviceCreatedAt - a.serviceCreatedAt)\n                                    .map((service) => (\n                                        <Box\n                                            cursor=\"pointer\"\n                                            onClick={() => {\n                                                if (!isPublic) {\n\n                                                    setSelectedService(service)\n                                                }\n                                            }}\n                                            key={service.serviceId}\n                                            spacing={8}\n                                            width=\"100%\"\n                                            p={5}\n                                            shadow=\"md\"\n                                            borderWidth=\"1px\"\n                                            borderRadius=\"md\"\n                                            flex=\"1\"\n                                            css={{\n                                                transition: 'all .3s ease-in-out',\n                                                '&:hover': {\n                                                    backgroundColor: '#1D1D1D',\n                                                }\n                                            }}\n                                        >\n                                            <VStack alignItems=\"flex-stretch\">\n\n                                                <HStack justifyContent=\"space-between\">\n                                                    <Heading as=\"h2\" size=\"md\">\n                                                        {service.serviceName}\n                                                    </Heading>\n                                                    <HStack>\n                                                        <Status status={service.serviceStatus} />\n                                                    </HStack>\n                                                </HStack>\n                                                <HStack justifyContent=\"space-between\">\n                                                    <Heading as=\"h5\" size=\"sm\" fontWeight=\"normal\" color=\"grey\">\n                                                        {service.serviceDescription}\n                                                    </Heading>\n                                                    <UpdatedAt updatedAt={service.serviceUpdatedAt} createdAt={service.serviceCreatedAt} />\n                                                </HStack>\n                                            </VStack>\n                                        </Box>\n                                    ))}\n                        </VStack>\n                    )}\n                />\n            </Box>\n        </Box>\n    );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Switch, Link as RouterLink, Route } from \"react-router-dom\";\nimport theme from \"./theme\";\nimport {\n  ChakraProvider,\n  ColorModeScript,\n  Button,\n  Box,\n  Container,\n  HStack,\n  Link,\n  Heading,\n} from \"@chakra-ui/react\";\nimport { PrivateRoute } from \"./PrivateRoute\";\n\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Home } from \"./Home\";\nimport { Incidents } from \"./Incidents\";\nimport { Services } from \"./Services\";\nimport { useLocalStorage, useLocation } from \"react-use\";\n\nconst App = () => {\n  const [storedPassword] = useLocalStorage('serverless-status', '');\n  const location = useLocation()\n  const logout = () => {\n    localStorage.removeItem(\"serverless-status\");\n    window.location.reload();\n  };\n  const isPublic  = location.pathname.includes('public')\n\n  console.log('location',location,isPublic)\n  return (\n    <Switch>\n      <Box minHeight=\"100vh\">\n        {storedPassword &&\n        \n        <Box p={5} borderBottomWidth=\"1px\">\n          <Container maxW=\"container.lg\">\n            <HStack justifyContent=\"space-between\">\n              <HStack spacing=\"54px\">\n\n                <Link as={RouterLink} to={`${isPublic ? `/public/incidents`: `/`}`} >\n                  <Heading\n                    as=\"h5\"\n                    size=\"md\"\n                    color={\n                      location.pathname === \"/public/incidents\" || location.pathname === \"/\"\n                        ? theme.colors.brand[100]\n                        : \"currentcolor\"\n                    }\n                  >\n                    Incidents\n                  </Heading>\n                </Link>\n                <Link as={RouterLink} to={`${isPublic ? `/public`: ``}/services`}>\n                  <Heading as=\"h5\" size=\"md\"\n                    color={\n                      \n                      location.pathname === \"/public/services\" || location.pathname === \"/services\"\n                        ? theme.colors.brand[100]\n                        : \"currentcolor\"\n                    }\n                  >\n                    Services\n                  </Heading>\n                </Link>\n              </HStack>\n              {!isPublic &&\n\n                <HStack spacing=\"54px\">\n                  <Link as={RouterLink} to=\"/public/incidents\" target=\"_blank\">\n                    <Heading as=\"h5\" size=\"sm\" fontWeight=\"normal\"\n                      color={\n                        location.pathname === \"/public/incidents\"\n                          ? theme.colors.brand[100]\n                          : \"currentcolor\"\n                      }\n                    >\n                      View Public\n                    </Heading>\n                  </Link>\n                  <Button onClick={logout}>Logout</Button>\n                </HStack>\n              }\n            </HStack>\n          </Container>\n        </Box>\n        }\n        <Container maxW=\"container.lg\">\n          <PrivateRoute path=\"/\" exact component={Incidents} />\n          <PrivateRoute path=\"/services\" exact component={Services} />\n          <Route path=\"/public/incidents\" exact component={Incidents} />\n          <Route path=\"/public/services\" exact component={Services} />\n        </Container>\n      </Box>\n    </Switch>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n    <ChakraProvider theme={theme}>\n      <BrowserRouter>\n        <App />\n\n      </BrowserRouter>\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}